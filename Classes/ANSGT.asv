classdef ANSGT
    % Ground truth for ANS
    %{
    -----------------------------------------------------------------------
    DESCRIPTION:
        Creates an object to store all of the ground truth data and
        simulation parameters for the ANS project. 
    -----------------------------------------------------------------------
    REFERENCES:
        - Text
    -----------------------------------------------------------------------
    NOTES:
        - If you want to change the default feature detector properties,
          use the setProp function after constructing the ANSGT object
        - All images will be saved in the Images folder associated with
          each spacecraft: 
            [ansGT.dirCurrent,'\',ansGT.dirData,'\',ansGT.spacecraft{n}.name,'\Images']
    -----------------------------------------------------------------------
    AUTHOR: Kaitlin Dennison and Nathan Stacey
    -----------------------------------------------------------------------
    COPYTRIGHT: 2019 SLAB Group
    -----------------------------------------------------------------------
    TIMESTAMPS:
        - 09-Jun-2019: creation (KD)
        - 13-Jun-2019: style changes (KD)
        - 14-Jun-2019: style updates, changed asteroid to its own class,
          added in new parameters at req of Rin and Tom (KD)
    -----------------------------------------------------------------------
    %}
    
    properties (SetAccess = protected)
        % These are protected and can only be edited by functions inside
        % this class. However, their GetAccess is still public so they can
        % be read by anyone, including the command line
        %% File System
        name                % str, name of test or simulation to add to any 
                            % files created by this instance
        dirCurrent = pwd    % str, current working directory
        dirAstModels = 'AsteroidModels' % str, directory with .tab files
                            % for the 3D models
        dirData = 'Data'    % str, directory to store all data
        %% Simulation Parameters
        asteroid            % struct, asteroid structure
        nSpacecraft         % int, number of spacecraft
        spacecraft          % nSpacecraftx1 cell, spacecraft objects
        tEpoch              % double, Julian date of epoch (days)
        tInterval           % double, time interval between images (s)
        nImages             % int, number of images per spacecraft
        %% Ground Truth Data
        tJD                 % nImagesx1 double, Julian date of each image 
                            % (days) 
        stateGT             % nImagesx(nSpacecraftxN+M) double, ground 
                            % truth of state estimate, excludes landmarks
        meta                % nImagesx12xnSpacecraft double, meta data 
                            % necessary for image generation 
                                % [JD,rSatACI,rAstSCI,eul,Ldxn]
                                % eul = rotMtoEul(R)
        rotMatrices         % struct, all rotation matrices
        
    end
    
    methods
        function ansGT = ANSGT(varargin)
            % ANSGT constructor
            % ansGT = ANSGT(option1,value1,...)
            %{
            ---------------------------------------------------------------
            INPUT:
                Input parsing is supported with defaults. ansGT = ANSGT() 
                sets all properties to default values
                name:       str, name of test or simulation to add to any
                            files created
                            DEFAULT: date of initialization in 
                            DD-MMM-YYYY format
                asteroid:   asteroid object, see ASTEROID.m
                            DEFAULT: Eros (see constructor function below)
                nSpacecraft: int, number of spacecraft in the swarm. If a 
                            number is input for this, it will generate the 
                            spacecraft cell array with the default 
                            spacecraft object and camera
                            DEFAULT: 2
                camera:     camera, the camera you want to use to setup the
                            default spacecraft. (See CAMERA.M)
                            Options: PtGrey12, PtGrey17, OSIRIS, NEAR, NanoCam
                            DEFAULT: PtGrey12
                spacecraft: nSpacecraftx1 cell of spacecraft objects
                            (See SPACECRAFT.m)
                tEpoch:     double, Julian date of the start of the sim
                            DEFAULT: 4 Sept 2019 00:00
                tInterval:  double, time between images (s)
                            DEFAULT: 300 (5 min)
                nImages:    double, number of images taken over the sim
                            DEFAULT: 500
            ---------------------------------------------------------------
            OUTPUT:
                ansGT:      ANSGT object, all simulation parameters stored,
                            no GT or images generated yet.
            ---------------------------------------------------------------
            %}

            %% Defaults
            AU = 149597870.7; % AU conversion [km/AU]
            G = 6.67259*10^-20; % Gravitational Constant
            % Asteroid
                defaultAst.name = 'Eros';
                defaultAst.filename = 'eros3mill'; % High Res Model
                defaultAst.filenameLR = 'eros200700'; % Low Res Model 
                defaultAst.m = 6.687E15; % mass (kg)
                defaultAst.mu = G*defaultAst.m;
                defaultAst.alb = 0.8;  % albedo
                % Orbital Elements (JPL HORIZONS)
                defaultAst.tEpoch = 2451170.5;   % JD epoch (days)
                    % 1998 Dec 23 00:00:00 UTC
                defaultAst.oeHCI = [1.458260038106518*AU;
                                    0.2228858603247133;
                                    deg2rad(10.83015266864554);
                                    deg2rad(304.4308844737856);
                                    deg2rad(178.6132327246327);
                                    deg2rad(208.1235381788443)];
                % Rotation Parameters (IAU Report) epoch: J2000
                defaultAst.rotParam = [11.35;
                                       17.22;
                                       326.07;
                                       1639.38864745];
            % Spacecraft
                tEpoch = datenum(2019,9,4,0,0,0)+1721058.5;  % JD epoch (days)
                oeACI = [35 0.01 deg2rad(80) deg2rad(220) 0 1.5]';
                defaultSc = SPACECRAFT(tEpoch,oeACI,defaultAst.mu,'defaultANS');
                defaultNSc = 2;            
            % Simulation
                defaultTEp = tEpoch;
                defaultTInt = 5*60;
                defaultNIm = 500;
                
            %% Input Parser
            p = inputParser;
            addParameter(p,'name',date,@ischar)
            addParameter(p,'asteroid',defaultAst)
            addParameter(p,'nSpacecraft',defaultNSc,@isnumeric)
            addParameter(p,'spacecraft',{})
            addParameter(p,'camera','default',@ischar)
            addParameter(p,'tEpoch',defaultTEp,@isnumeric)
            addParameter(p,'tInterval',defaultTInt,@isnumeric)
            addParameter(p,'nImages',defaultNIm,@isnumeric)
            parse(p,varargin{:})
            
            %% Check Input
            switch p.Results.camera
                case 'PtGrey17'
                    % Point Grey 17mm
                    defaultSc.camera = CAMERA(17,[1200 1920],[5.86 5.86],'PtGrey17');
                case 'NEAR'
                    % NEAR Shoemaker
                    defaultSc.camera = CAMERA(168,[244 537],[27 16],'NEAR');
                case 'OSIRIS'
                    % OSIRIS REx's NavCam
                    defaultSc.camera = CAMERA(7.6,[1944 2592],[2.2 2.2],'NavCam');
                case 'NanoCam'
                    % GOMspace NanoCam
                    defaultSc.camera = CAMERA(8,[2048 1536],[3.2 3.2],'NanoCam');
                otherwise
                    % Point Grey
                    defaultSc.camera = CAMERA(12,[1200 1920],[5.86 5.86],'PtGrey12');
            end
            if isempty(p.Results.spacecraft)
                sc = cell(p.Results.nSpacecraft,1);
                for n = 1:p.Results.nSpacecraft
                    sc{n} = defaultSc;
                end
                ansGT.spacecraft = sc;
                ansGT.nSpacecraft = p.Results.nSpacecraft;
                for n = 1:ansGT.nSpacecraft
                    ansGT.spacecraft{n}.name = ['Orbiter',num2str(n)];
                end
            else
                ansGT.nSpacecraft = size(p.Results.spacecraft,1);
                ansGT.spacecraft = p.Results.spacecraft;
            end
            
            %% Parse Remaining Input
            ansGT.name = p.Results.name;
            ansGT.asteroid = p.Results.asteroid;
            ansGT.tEpoch = p.Results.tEpoch;
            ansGT.tInterval = p.Results.tInterval;
            ansGT.nImages = p.Results.nImages;
            tIntD = ansGT.tInterval/86400;
            ansGT.tJD = (ansGT.tEpoch:tIntD:(ansGT.tEpoch+tIntD*(ansGT.nImages-1)))';
        end
        
        function setProp(ansGT,varargin)
            if mod(nargin,2) ~= 0
                error('An even number of inputs must be given')
            end
            for n = 1:2:nargin
                switch varargin{n}
                    case 'asteroid'
                        ansGT.asteroid = varargin{n+1};
                    otherwise
                        disp(['input: ',varargin{n}, ' not recognized'])
                end
            end
            
        end
        
        function ansGT = compGT(ansGT)
            % Compute all of the ground truth meta data (not the images)
            % ansGT = ansGT.compGT()
            % OR ansGT = compGT(ansGT)
            %{
            ---------------------------------------------------------------
            INPUT: none
            ---------------------------------------------------------------
            OUTPUT:
                ansGT       ANSGT object
            ---------------------------------------------------------------
            NOTES:
                - compGT must be called first!
                - All images will be saved in the Images folder associated
                  with each spacecraft:
                  [ansGT.dirCurrent,'\',ansGT.dirData,'\',ansGT.spacecraft{n}.name,'\Images']
            ---------------------------------------------------------------
            %}
            
            %% Set Up File System
            for n = 1:ansGT.nSpacecraft
                dirSpacecraft = [ansGT.dirCurrent,'\',ansGT.dirData,'\',ansGT.spacecraft{n}.name];
                if ~exist(dirSpacecraft,'dir')
                    mkdir(dirSpacecraft)
                end
                if ~exist([dirSpacecraft,'\Images'],'dir')
                    mkdir([dirSpacecraft,'\Images'])
                end
            end
            addpath(genpath([ansGT.dirCurrent,'\',ansGT.dirData]));
            
            %% Initialize
            stateGTsize = ansGT.nSpacecraft*6;
            ansGT.stateGT = zeros(ansGT.nImages,stateGTsize);
            ansGT.meta = zeros(ansGT.nImages,12,ansGT.nSpacecraft);
            % [JD,rAstSCI,rSatACI,eul,Ldxn] [1 x 12]
            % eul = rotm2eul(rotm,'ZYX')
            
            %% Compute Data
            muSun = 1.3271244004193938E11; % Grav Param of Sun [km^3/s^2]
            Reqec = rotEQUtoECL();
            common = zeros(ansGT.nImages,4);
            % Data common to all SC
            for i = 1:ansGT.nImages
                % Asteroid
                tAst = (ansGT.tJD(i) - ansGT.asteroid.tEpoch)*86400;
                rAstSCI = Reqec'*propOEtoRV(ansGT.asteroid.oeHCI,muSun,tAst);
                common(i,:) = [ansGT.tJD(i) rAstSCI'];
            end
            ansGT.meta(:,1:4,:) = repmat(common,1,1,ansGT.nSpacecraft);
            % Data unique to each SC
            for n = 1:ansGT.nSpacecraft
                for i = 1:ansGT.nImages
                    rAstSCI = ansGT.meta(i,2:4,n);
                    % Spacecraft Position
                    tSat = (ansGT.tJD(i) - ansGT.spacecraft{n}.tEpoch)*86400;
                    [rSatACI,vSatACI] = propOEtoRV(ansGT.spacecraft{n}.oeACI,ansGT.asteroid.mu,tSat);
                    % Spacecraft Attitude
                    R = rotWldCam(rSatACI,vSatACI,[0;0;0]);
                    eul = rotMtoEul(R);
                    % Lighting Direction
                    dat = transPt32(-rAstSCI,rSatACI,R,ansGT.spacecraft{n}.camera)';
                    Ldxn = -dat'./norm(dat);
                    a = acosd(dot(rSatACI,-rAstSCI)/(norm(rSat)*norm(-rAstSCI)));
                    if a > 90
                        Ldxn = -Ldxn;
                    end
                end
            end
            
        end
        
        function ansGT = readGT(ansGT)
            % Read all of the ground truth data in from saves .png and .csv
            % ansGT = ansGT.readGT()
            % OR ansGT = readGT(ansGT)
            %{
            ---------------------------------------------------------------
            INPUT: none
            ---------------------------------------------------------------
            OUTPUT:
                ansGT       ANSGT object
            ---------------------------------------------------------------
            %}
            
        end
        
        function ansGT = genIms(ansGT)
            % Generate all of the images for the GT
            % ansGT = ansGT.genIms()
            % OR ansGT = genIms(ansGT)
            %{
            ---------------------------------------------------------------
            INPUT: none
            ---------------------------------------------------------------
            OUTPUT:
                ansGT       ANSGT object
            ---------------------------------------------------------------
            NOTES:
                - compGT must be called first!
                - All images will be saved in the Images folder associated
                  with each spacecraft:
                  [ansGT.dirCurrent,'\',ansGT.dirData,'\',ansGT.spacecraft{n}.name,'\Images']
            ---------------------------------------------------------------
            %}

        end
        
        function ansGT = detectFeat(ansGT)
            % Detect all of the features in the images
            % ansGT = ansGT.detectFeat()
            % OR ansGT = detectFeat(ansGT)
            %{
            ---------------------------------------------------------------
            INPUT: none
            ---------------------------------------------------------------
            OUTPUT:
                ansGT       ANSGT object
            ---------------------------------------------------------------
            %}
        end
    end
end